import type { NextPage } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import { useState } from "react";
import { FormGroup } from "../../components/Form/FormGroup";
import { Input } from "../../components/Form/Input";
import { Label } from "../../components/Form/Label";
import { api } from "../../lib/http";
import styles from "../../styles/Home/styles.module.css";

interface LoginProps {
  user: any;
}

// export async function getServerSideProps() {
//   const [user] = await Promise.all([
//     fetch(`${config.origin}/auth/me`).then((res) => res.json()),
//   ]);

//   return { props: { user } };
// }

const Home: NextPage<LoginProps> = ({ user }: LoginProps) => {
  const [email, setEmail] = useState<string>();
  const [isPending, setIsPending] = useState(false);
  const router = useRouter();

  return (
    <div className={styles.container}>
      <Head>
        <title>Doubtful.</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>Welcome! We need you to login. Don't clink the link in the email, copy the code back here.</h1>

        <section>
          <form
            action="#"
            onSubmit={async (ev) => {
              ev.preventDefault();
              try {
                setIsPending(true);
                const formData = new FormData(ev.target as HTMLFormElement);
                const code = formData.get("code")?.toString();
                const formEmail = formData.get("email")?.toString() || email;

                if (code) {
                  const ret = (await api
                    .url("/auth/login")
                    .post({ email: formEmail, code })
                    .json()) as { access_token: string };

                  localStorage["doubtful:jwt"] = ret.access_token;

                  router.push("/");
                } else if (formEmail) {
                  await api
                    .url("/auth/login")
                    .post({ email: formEmail, code: "code" })
                    .json();
                  setEmail(formEmail);
                }
              } finally {
                setIsPending(false);
              }
            }}
          >
            {!email ? (
              <FormGroup>
                <Label label="Email Address" name="email" />
                <Input
                  key="email"
                  name="email"
                  onChange={() => {}}
                  placeholder="joe@bloggs.com"
                  disabled={false}
                  defaultValue=""
                />
                <br />
                <button type="submit" disabled={isPending}>
                  Send Code
                </button>
              </FormGroup>
            ) : (
              <FormGroup>
                <Label label="Code" name="code" />
                <Input
                  key="code"
                  name="code"
                  onChange={() => {}}
                  placeholder="* * * * * *"
                  disabled={false}
                  defaultValue=""
                />
                <button type="submit" disabled={isPending}>
                  Sign Up / In
                </button>
              </FormGroup>
            )}
          </form>
        </section>
      </main>
    </div>
  );
};

export default Home;
