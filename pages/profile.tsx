import { withIronSessionSsr } from "iron-session/next";
import type { NextPage } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import { useState } from "react";
import { api } from "../lib/http";
import styles from "../styles/Home/styles.module.css";
import { ironConfig } from "./api/_utils/ironConfig";
import { config } from "../config";
import { FormGroup } from "../components/Form/FormGroup";
import { Label } from "../components/Form/Label";
import { Input } from "../components/Form/Input";

interface LoginProps {
  user: any;
}

export const getServerSideProps = withIronSessionSsr(
  async function getServerSideProps({ req }) {
    const [user] = await Promise.all([
      fetch(`${config.origin}/auth/me`, {
        headers: {
          authorization: `Bearer ${(req.session as any).access_token}`,
        },
      })
        .then((res) => res.json())
        .catch(() => null),
    ]);

    return { props: { user } };
  },
  ironConfig
);

const Home: NextPage<LoginProps> = ({ user }: LoginProps) => {
  const router = useRouter();
  const [isPending, setIsPending] = useState(false);

  return (
    <div className={styles.container}>
      <Head>
        <title>Doubtful.</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>Yeah... You probably have a name.</h1>

        <section>
          <form
            action="#"
            onSubmit={async (ev) => {
              ev.preventDefault();
              try {
                setIsPending(true);
                const formData = new FormData(ev.target as HTMLFormElement);
                const name = formData.get("name")?.toString();
                const avatarUrl = formData.get("avatarUrl")?.toString();

                await api
                  .url(`/profile/update`)
                  .post({ name, avatarUrl })
                  .json();

                location.reload();
              } finally {
                setIsPending(false);
              }
            }}
          >
            <FormGroup>
              <Label name="name" label="Your Name" />
              <Input
                name={"name"}
                placeholder={"Your name..."}
                defaultValue={user.name}
                onChange={() => {}}
                disabled={false}
                required
              />
            </FormGroup>
            <FormGroup>
              <Label name="avatarUrl" label="A public url to an avatar" />
              <Input
                name={"avatarUrl"}
                placeholder={"A url..."}
                defaultValue={user.avatarUrl}
                onChange={() => {}}
                disabled={false}
                required
                type="url"
              />
            </FormGroup>

            <button type="submit" disabled={isPending}>
              Save
            </button>
          </form>
        </section>
      </main>
    </div>
  );
};

export default Home;
