import { useRouter } from "next/router";
import type { NextPage } from "next";
import Head from "next/head";
import { Question } from "../../interfaces";
import styles from "./styles.module.css";
import { QuestionRightPane } from "../../components/QuestionRightPane/QuestionRightPane";
import { QuestionHeader } from "../../components/QuestionHeader/QuestionHeader";
import { withIronSessionSsr } from "iron-session/next";
import { ironConfig } from "../api/_utils/ironConfig";
import { config } from "../../config";
import { QuestionEditor } from "../../components/QuestionEditor";
import { useState } from "react";
import * as Y from "yjs";
import { api } from "../../lib/http";

export const getServerSideProps = withIronSessionSsr(async function ({ req }) {
  const [user] = await Promise.all([
    fetch(`${config.origin}/auth/me`, {
      headers: { authorization: `Bearer ${(req.session as any).access_token}` },
    }).then((res) => res.json()),
  ]);

  return { props: { user } };
}, ironConfig);

export interface QuestionProps {
  user: any;
}

export const NewQuestionPage: NextPage<QuestionProps> = ({
  user,
}: QuestionProps) => {
  const [question, setQuestion] = useState<Partial<Question>>({});
  const [yDoc] = useState(new Y.Doc({ gc: false }));
  const router = useRouter();
  const canPublish = question.title && question.title.length > 5;
  const [isPublishPending, setIsPublishPending] = useState(false);

  return (
    <div className={styles.pageContainer}>
      <Head>
        <title>Question | Doubtful.</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <QuestionHeader user={user} />

      <div className={styles.container}>
        <main className={styles.questionContainer}>
          <section className={styles.questionBody}>
            <div className={styles.makeSuggestionWrapper}>
              <div className={styles.makeSuggestion}>
                <span>Once you're ready</span>
                <button
                  className={styles.makeSuggestionButton}
                  disabled={!canPublish || isPublishPending}
                  onClick={async () => {
                    setIsPublishPending(true);
                    try {
                      const yDocContent = Y.encodeStateAsUpdate(yDoc);
                      const newQuestion: Question = await api
                        .url(`/question/new`)
                        .post({
                          ...question,
                          content: Array.from(yDocContent),
                        })
                        .json();
                      router.push(`/question/${newQuestion.slug}`);
                    } finally {
                      setIsPublishPending(false);
                    }
                  }}
                >
                  Share
                </button>
              </div>
            </div>

            <section>
              <QuestionEditor
                canEdit={true}
                yDoc={yDoc}
                user={user}
                onChange={setQuestion}
              />
            </section>
          </section>
        </main>
        <QuestionRightPane user={user} />
      </div>
    </div>
  );
};

export default NewQuestionPage;
